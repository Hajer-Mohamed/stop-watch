
STOP_WHATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000006d6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095a  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000366  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000544  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  000021ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000295  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000730  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3b 03 	call	0x676	; 0x676 <main>
  8a:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buzzer_init>:



void buzzer_init(char port,char pin)
{
	set_pin_dir(port,pin,1);
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	0e 94 57 00 	call	0xae	; 0xae <set_pin_dir>
}
  9e:	08 95       	ret

000000a0 <make_sound>:

void make_sound(char port,char pin)
{
	DIO_write(port,pin,1);
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
}
  ac:	08 95       	ret

000000ae <set_pin_dir>:

#include <avr/io.h>
#include "std_macros.h"
void set_pin_dir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  ae:	82 34       	cpi	r24, 0x42	; 66
  b0:	51 f1       	breq	.+84     	; 0x106 <set_pin_dir+0x58>
  b2:	83 34       	cpi	r24, 0x43	; 67
  b4:	20 f4       	brcc	.+8      	; 0xbe <set_pin_dir+0x10>
  b6:	81 34       	cpi	r24, 0x41	; 65
  b8:	09 f0       	breq	.+2      	; 0xbc <set_pin_dir+0xe>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <set_pin_dir+0x104>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <set_pin_dir+0x1e>
  be:	83 34       	cpi	r24, 0x43	; 67
  c0:	09 f4       	brne	.+2      	; 0xc4 <set_pin_dir+0x16>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <set_pin_dir+0x92>
  c4:	84 34       	cpi	r24, 0x44	; 68
  c6:	09 f0       	breq	.+2      	; 0xca <set_pin_dir+0x1c>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <set_pin_dir+0x104>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <set_pin_dir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <set_pin_dir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <set_pin_dir+0x30>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <set_pin_dir+0x2c>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <set_pin_dir+0x4a>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <set_pin_dir+0x46>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <set_pin_dir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <set_pin_dir+0x6a>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <set_pin_dir+0x66>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <set_pin_dir+0x84>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <set_pin_dir+0x80>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <set_pin_dir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <set_pin_dir+0xa4>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <set_pin_dir+0xa0>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <set_pin_dir+0xbe>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <set_pin_dir+0xba>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <set_pin_dir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <set_pin_dir+0xde>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <set_pin_dir+0xda>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <set_pin_dir+0xf8>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <set_pin_dir+0xf4>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1b4:	82 34       	cpi	r24, 0x42	; 66
 1b6:	51 f1       	breq	.+84     	; 0x20c <DIO_write+0x58>
 1b8:	83 34       	cpi	r24, 0x43	; 67
 1ba:	20 f4       	brcc	.+8      	; 0x1c4 <DIO_write+0x10>
 1bc:	81 34       	cpi	r24, 0x41	; 65
 1be:	09 f0       	breq	.+2      	; 0x1c2 <DIO_write+0xe>
 1c0:	7b c0       	rjmp	.+246    	; 0x2b8 <DIO_write+0x104>
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <DIO_write+0x1e>
 1c4:	83 34       	cpi	r24, 0x43	; 67
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_write+0x16>
 1c8:	3e c0       	rjmp	.+124    	; 0x246 <DIO_write+0x92>
 1ca:	84 34       	cpi	r24, 0x44	; 68
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <DIO_write+0x1c>
 1ce:	74 c0       	rjmp	.+232    	; 0x2b8 <DIO_write+0x104>
 1d0:	57 c0       	rjmp	.+174    	; 0x280 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1d6:	2b b3       	in	r18, 0x1b	; 27
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ac 01       	movw	r20, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_write+0x30>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_write+0x2c>
 1e8:	ba 01       	movw	r22, r20
 1ea:	62 2b       	or	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1f0:	2b b3       	in	r18, 0x1b	; 27
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x4a>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x46>
 202:	ba 01       	movw	r22, r20
 204:	60 95       	com	r22
 206:	62 23       	and	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	69 f4       	brne	.+26     	; 0x22a <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 210:	28 b3       	in	r18, 0x18	; 24
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	ac 01       	movw	r20, r24
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_write+0x6a>
 21a:	44 0f       	add	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_write+0x66>
 222:	ba 01       	movw	r22, r20
 224:	62 2b       	or	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	ac 01       	movw	r20, r24
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_write+0x84>
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_write+0x80>
 23c:	ba 01       	movw	r22, r20
 23e:	60 95       	com	r22
 240:	62 23       	and	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 246:	41 30       	cpi	r20, 0x01	; 1
 248:	69 f4       	brne	.+26     	; 0x264 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 24a:	25 b3       	in	r18, 0x15	; 21
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	ac 01       	movw	r20, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_write+0xa4>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_write+0xa0>
 25c:	ba 01       	movw	r22, r20
 25e:	62 2b       	or	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 264:	25 b3       	in	r18, 0x15	; 21
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	ac 01       	movw	r20, r24
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_write+0xbe>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_write+0xba>
 276:	ba 01       	movw	r22, r20
 278:	60 95       	com	r22
 27a:	62 23       	and	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	69 f4       	brne	.+26     	; 0x29e <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	ac 01       	movw	r20, r24
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_write+0xde>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_write+0xda>
 296:	ba 01       	movw	r22, r20
 298:	62 2b       	or	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 29e:	22 b3       	in	r18, 0x12	; 18
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	ac 01       	movw	r20, r24
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_write+0xf8>
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_write+0xf4>
 2b0:	ba 01       	movw	r22, r20
 2b2:	60 95       	com	r22
 2b4:	62 23       	and	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret

000002ba <DIO_read>:


unsigned char DIO_read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2ba:	82 34       	cpi	r24, 0x42	; 66
 2bc:	f1 f0       	breq	.+60     	; 0x2fa <DIO_read+0x40>
 2be:	83 34       	cpi	r24, 0x43	; 67
 2c0:	20 f4       	brcc	.+8      	; 0x2ca <DIO_read+0x10>
 2c2:	81 34       	cpi	r24, 0x41	; 65
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <DIO_read+0xe>
 2c6:	4f c0       	rjmp	.+158    	; 0x366 <DIO_read+0xac>
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <DIO_read+0x1c>
 2ca:	83 34       	cpi	r24, 0x43	; 67
 2cc:	41 f1       	breq	.+80     	; 0x31e <DIO_read+0x64>
 2ce:	84 34       	cpi	r24, 0x44	; 68
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <DIO_read+0x1a>
 2d2:	49 c0       	rjmp	.+146    	; 0x366 <DIO_read+0xac>
 2d4:	36 c0       	rjmp	.+108    	; 0x342 <DIO_read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2d6:	29 b3       	in	r18, 0x19	; 25
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	06 2e       	mov	r0, r22
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_read+0x2a>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_read+0x26>
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	82 23       	and	r24, r18
 2ec:	93 23       	and	r25, r19
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_read+0x3a>
 2f0:	95 95       	asr	r25
 2f2:	87 95       	ror	r24
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_read+0x36>
		break;
 2f8:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2fa:	26 b3       	in	r18, 0x16	; 22
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	06 2e       	mov	r0, r22
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_read+0x4e>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_read+0x4a>
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	82 23       	and	r24, r18
 310:	93 23       	and	r25, r19
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_read+0x5e>
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_read+0x5a>
		break;
 31c:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 31e:	23 b3       	in	r18, 0x13	; 19
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	06 2e       	mov	r0, r22
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_read+0x72>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_read+0x6e>
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	82 23       	and	r24, r18
 334:	93 23       	and	r25, r19
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_read+0x82>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_read+0x7e>
		break;
 340:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 342:	20 b3       	in	r18, 0x10	; 16
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	06 2e       	mov	r0, r22
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_read+0x96>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_read+0x92>
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	82 23       	and	r24, r18
 358:	93 23       	and	r25, r19
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_read+0xa6>
 35c:	95 95       	asr	r25
 35e:	87 95       	ror	r24
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_read+0xa2>
		break;
 364:	08 95       	ret
}


unsigned char DIO_read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 366:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 368:	08 95       	ret

0000036a <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 36a:	82 34       	cpi	r24, 0x42	; 66
 36c:	b9 f0       	breq	.+46     	; 0x39c <DIO_toggle+0x32>
 36e:	83 34       	cpi	r24, 0x43	; 67
 370:	18 f4       	brcc	.+6      	; 0x378 <DIO_toggle+0xe>
 372:	81 34       	cpi	r24, 0x41	; 65
 374:	c9 f5       	brne	.+114    	; 0x3e8 <DIO_toggle+0x7e>
 376:	05 c0       	rjmp	.+10     	; 0x382 <DIO_toggle+0x18>
 378:	83 34       	cpi	r24, 0x43	; 67
 37a:	e9 f0       	breq	.+58     	; 0x3b6 <DIO_toggle+0x4c>
 37c:	84 34       	cpi	r24, 0x44	; 68
 37e:	a1 f5       	brne	.+104    	; 0x3e8 <DIO_toggle+0x7e>
 380:	27 c0       	rjmp	.+78     	; 0x3d0 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 382:	2b b3       	in	r18, 0x1b	; 27
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_toggle+0x26>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_toggle+0x22>
 394:	ba 01       	movw	r22, r20
 396:	62 27       	eor	r22, r18
 398:	6b bb       	out	0x1b, r22	; 27
		break;
 39a:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 39c:	28 b3       	in	r18, 0x18	; 24
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_toggle+0x40>
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_toggle+0x3c>
 3ae:	ba 01       	movw	r22, r20
 3b0:	62 27       	eor	r22, r18
 3b2:	68 bb       	out	0x18, r22	; 24
		break;
 3b4:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 3b6:	25 b3       	in	r18, 0x15	; 21
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	ac 01       	movw	r20, r24
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_toggle+0x5a>
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_toggle+0x56>
 3c8:	ba 01       	movw	r22, r20
 3ca:	62 27       	eor	r22, r18
 3cc:	65 bb       	out	0x15, r22	; 21
		break;
 3ce:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3d0:	22 b3       	in	r18, 0x12	; 18
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	ac 01       	movw	r20, r24
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_toggle+0x74>
 3da:	44 0f       	add	r20, r20
 3dc:	55 1f       	adc	r21, r21
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_toggle+0x70>
 3e2:	ba 01       	movw	r22, r20
 3e4:	62 27       	eor	r22, r18
 3e6:	62 bb       	out	0x12, r22	; 18
 3e8:	08 95       	ret

000003ea <set_port_dir>:
		default: break;
	}
}
void set_port_dir(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3ea:	82 34       	cpi	r24, 0x42	; 66
 3ec:	61 f0       	breq	.+24     	; 0x406 <set_port_dir+0x1c>
 3ee:	83 34       	cpi	r24, 0x43	; 67
 3f0:	18 f4       	brcc	.+6      	; 0x3f8 <set_port_dir+0xe>
 3f2:	81 34       	cpi	r24, 0x41	; 65
 3f4:	69 f4       	brne	.+26     	; 0x410 <set_port_dir+0x26>
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <set_port_dir+0x18>
 3f8:	83 34       	cpi	r24, 0x43	; 67
 3fa:	39 f0       	breq	.+14     	; 0x40a <set_port_dir+0x20>
 3fc:	84 34       	cpi	r24, 0x44	; 68
 3fe:	41 f4       	brne	.+16     	; 0x410 <set_port_dir+0x26>
 400:	06 c0       	rjmp	.+12     	; 0x40e <set_port_dir+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 402:	6a bb       	out	0x1a, r22	; 26
		break ;
 404:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 406:	67 bb       	out	0x17, r22	; 23
		break ;
 408:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 40a:	64 bb       	out	0x14, r22	; 20
		break ;
 40c:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 40e:	61 bb       	out	0x11, r22	; 17
 410:	08 95       	ret

00000412 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 412:	82 34       	cpi	r24, 0x42	; 66
 414:	61 f0       	breq	.+24     	; 0x42e <DIO_write_port+0x1c>
 416:	83 34       	cpi	r24, 0x43	; 67
 418:	18 f4       	brcc	.+6      	; 0x420 <DIO_write_port+0xe>
 41a:	81 34       	cpi	r24, 0x41	; 65
 41c:	69 f4       	brne	.+26     	; 0x438 <DIO_write_port+0x26>
 41e:	05 c0       	rjmp	.+10     	; 0x42a <DIO_write_port+0x18>
 420:	83 34       	cpi	r24, 0x43	; 67
 422:	39 f0       	breq	.+14     	; 0x432 <DIO_write_port+0x20>
 424:	84 34       	cpi	r24, 0x44	; 68
 426:	41 f4       	brne	.+16     	; 0x438 <DIO_write_port+0x26>
 428:	06 c0       	rjmp	.+12     	; 0x436 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 42a:	6b bb       	out	0x1b, r22	; 27
		break ;
 42c:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 42e:	68 bb       	out	0x18, r22	; 24
		break ;
 430:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 432:	65 bb       	out	0x15, r22	; 21
		break ;
 434:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 436:	62 bb       	out	0x12, r22	; 18
 438:	08 95       	ret

0000043a <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 43a:	82 34       	cpi	r24, 0x42	; 66
 43c:	61 f0       	breq	.+24     	; 0x456 <DIO_read_port+0x1c>
 43e:	83 34       	cpi	r24, 0x43	; 67
 440:	18 f4       	brcc	.+6      	; 0x448 <DIO_read_port+0xe>
 442:	81 34       	cpi	r24, 0x41	; 65
 444:	71 f4       	brne	.+28     	; 0x462 <DIO_read_port+0x28>
 446:	05 c0       	rjmp	.+10     	; 0x452 <DIO_read_port+0x18>
 448:	83 34       	cpi	r24, 0x43	; 67
 44a:	39 f0       	breq	.+14     	; 0x45a <DIO_read_port+0x20>
 44c:	84 34       	cpi	r24, 0x44	; 68
 44e:	49 f4       	brne	.+18     	; 0x462 <DIO_read_port+0x28>
 450:	06 c0       	rjmp	.+12     	; 0x45e <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 452:	89 b3       	in	r24, 0x19	; 25
		break ;
 454:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 456:	86 b3       	in	r24, 0x16	; 22
		break ;
 458:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 45a:	83 b3       	in	r24, 0x13	; 19
		break ;
 45c:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 45e:	80 b3       	in	r24, 0x10	; 16
		break ;
 460:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 462:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 464:	08 95       	ret

00000466 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 466:	82 34       	cpi	r24, 0x42	; 66
 468:	51 f1       	breq	.+84     	; 0x4be <DIO_vconnectpullup+0x58>
 46a:	83 34       	cpi	r24, 0x43	; 67
 46c:	20 f4       	brcc	.+8      	; 0x476 <DIO_vconnectpullup+0x10>
 46e:	81 34       	cpi	r24, 0x41	; 65
 470:	09 f0       	breq	.+2      	; 0x474 <DIO_vconnectpullup+0xe>
 472:	7b c0       	rjmp	.+246    	; 0x56a <DIO_vconnectpullup+0x104>
 474:	07 c0       	rjmp	.+14     	; 0x484 <DIO_vconnectpullup+0x1e>
 476:	83 34       	cpi	r24, 0x43	; 67
 478:	09 f4       	brne	.+2      	; 0x47c <DIO_vconnectpullup+0x16>
 47a:	3e c0       	rjmp	.+124    	; 0x4f8 <DIO_vconnectpullup+0x92>
 47c:	84 34       	cpi	r24, 0x44	; 68
 47e:	09 f0       	breq	.+2      	; 0x482 <DIO_vconnectpullup+0x1c>
 480:	74 c0       	rjmp	.+232    	; 0x56a <DIO_vconnectpullup+0x104>
 482:	57 c0       	rjmp	.+174    	; 0x532 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	69 f4       	brne	.+26     	; 0x4a2 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 488:	2b b3       	in	r18, 0x1b	; 27
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	ac 01       	movw	r20, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_vconnectpullup+0x30>
 492:	44 0f       	add	r20, r20
 494:	55 1f       	adc	r21, r21
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_vconnectpullup+0x2c>
 49a:	ba 01       	movw	r22, r20
 49c:	62 2b       	or	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 4a2:	2b b3       	in	r18, 0x1b	; 27
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_vconnectpullup+0x4a>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_vconnectpullup+0x46>
 4b4:	ba 01       	movw	r22, r20
 4b6:	60 95       	com	r22
 4b8:	62 23       	and	r22, r18
 4ba:	6b bb       	out	0x1b, r22	; 27
 4bc:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	69 f4       	brne	.+26     	; 0x4dc <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4c2:	28 b3       	in	r18, 0x18	; 24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	ac 01       	movw	r20, r24
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_vconnectpullup+0x6a>
 4cc:	44 0f       	add	r20, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_vconnectpullup+0x66>
 4d4:	ba 01       	movw	r22, r20
 4d6:	62 2b       	or	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4dc:	28 b3       	in	r18, 0x18	; 24
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	ac 01       	movw	r20, r24
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_vconnectpullup+0x84>
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_vconnectpullup+0x80>
 4ee:	ba 01       	movw	r22, r20
 4f0:	60 95       	com	r22
 4f2:	62 23       	and	r22, r18
 4f4:	68 bb       	out	0x18, r22	; 24
 4f6:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	69 f4       	brne	.+26     	; 0x516 <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 4fc:	25 b3       	in	r18, 0x15	; 21
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	ac 01       	movw	r20, r24
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_vconnectpullup+0xa4>
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_vconnectpullup+0xa0>
 50e:	ba 01       	movw	r22, r20
 510:	62 2b       	or	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 516:	25 b3       	in	r18, 0x15	; 21
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	ac 01       	movw	r20, r24
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_vconnectpullup+0xbe>
 520:	44 0f       	add	r20, r20
 522:	55 1f       	adc	r21, r21
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_vconnectpullup+0xba>
 528:	ba 01       	movw	r22, r20
 52a:	60 95       	com	r22
 52c:	62 23       	and	r22, r18
 52e:	65 bb       	out	0x15, r22	; 21
 530:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	69 f4       	brne	.+26     	; 0x550 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 536:	22 b3       	in	r18, 0x12	; 18
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	ac 01       	movw	r20, r24
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_vconnectpullup+0xde>
 540:	44 0f       	add	r20, r20
 542:	55 1f       	adc	r21, r21
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_vconnectpullup+0xda>
 548:	ba 01       	movw	r22, r20
 54a:	62 2b       	or	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 550:	22 b3       	in	r18, 0x12	; 18
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	ac 01       	movw	r20, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_vconnectpullup+0xf8>
 55a:	44 0f       	add	r20, r20
 55c:	55 1f       	adc	r21, r21
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_vconnectpullup+0xf4>
 562:	ba 01       	movw	r22, r20
 564:	60 95       	com	r22
 566:	62 23       	and	r22, r18
 568:	62 bb       	out	0x12, r22	; 18
 56a:	08 95       	ret

0000056c <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 56c:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 56e:	82 34       	cpi	r24, 0x42	; 66
 570:	81 f0       	breq	.+32     	; 0x592 <write_low_nibble+0x26>
 572:	83 34       	cpi	r24, 0x43	; 67
 574:	18 f4       	brcc	.+6      	; 0x57c <write_low_nibble+0x10>
 576:	81 34       	cpi	r24, 0x41	; 65
 578:	f1 f4       	brne	.+60     	; 0x5b6 <write_low_nibble+0x4a>
 57a:	05 c0       	rjmp	.+10     	; 0x586 <write_low_nibble+0x1a>
 57c:	83 34       	cpi	r24, 0x43	; 67
 57e:	79 f0       	breq	.+30     	; 0x59e <write_low_nibble+0x32>
 580:	84 34       	cpi	r24, 0x44	; 68
 582:	c9 f4       	brne	.+50     	; 0x5b6 <write_low_nibble+0x4a>
 584:	12 c0       	rjmp	.+36     	; 0x5aa <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 586:	8b b3       	in	r24, 0x1b	; 27
 588:	80 7f       	andi	r24, 0xF0	; 240
 58a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 58c:	8b b3       	in	r24, 0x1b	; 27
 58e:	86 2b       	or	r24, r22
 590:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 592:	88 b3       	in	r24, 0x18	; 24
 594:	80 7f       	andi	r24, 0xF0	; 240
 596:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 598:	88 b3       	in	r24, 0x18	; 24
 59a:	86 2b       	or	r24, r22
 59c:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 59e:	85 b3       	in	r24, 0x15	; 21
 5a0:	80 7f       	andi	r24, 0xF0	; 240
 5a2:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5a4:	85 b3       	in	r24, 0x15	; 21
 5a6:	86 2b       	or	r24, r22
 5a8:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 5aa:	82 b3       	in	r24, 0x12	; 18
 5ac:	80 7f       	andi	r24, 0xF0	; 240
 5ae:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5b0:	82 b3       	in	r24, 0x12	; 18
 5b2:	68 2b       	or	r22, r24
 5b4:	62 bb       	out	0x12, r22	; 18
 5b6:	08 95       	ret

000005b8 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 5b8:	62 95       	swap	r22
 5ba:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5bc:	82 34       	cpi	r24, 0x42	; 66
 5be:	81 f0       	breq	.+32     	; 0x5e0 <write_high_nibble+0x28>
 5c0:	83 34       	cpi	r24, 0x43	; 67
 5c2:	18 f4       	brcc	.+6      	; 0x5ca <write_high_nibble+0x12>
 5c4:	81 34       	cpi	r24, 0x41	; 65
 5c6:	f1 f4       	brne	.+60     	; 0x604 <write_high_nibble+0x4c>
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <write_high_nibble+0x1c>
 5ca:	83 34       	cpi	r24, 0x43	; 67
 5cc:	79 f0       	breq	.+30     	; 0x5ec <write_high_nibble+0x34>
 5ce:	84 34       	cpi	r24, 0x44	; 68
 5d0:	c9 f4       	brne	.+50     	; 0x604 <write_high_nibble+0x4c>
 5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 5d4:	8b b3       	in	r24, 0x1b	; 27
 5d6:	8f 70       	andi	r24, 0x0F	; 15
 5d8:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 5da:	8b b3       	in	r24, 0x1b	; 27
 5dc:	86 2b       	or	r24, r22
 5de:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 5e0:	88 b3       	in	r24, 0x18	; 24
 5e2:	8f 70       	andi	r24, 0x0F	; 15
 5e4:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5e6:	88 b3       	in	r24, 0x18	; 24
 5e8:	86 2b       	or	r24, r22
 5ea:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 5ec:	85 b3       	in	r24, 0x15	; 21
 5ee:	8f 70       	andi	r24, 0x0F	; 15
 5f0:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5f2:	85 b3       	in	r24, 0x15	; 21
 5f4:	86 2b       	or	r24, r22
 5f6:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 5f8:	82 b3       	in	r24, 0x12	; 18
 5fa:	8f 70       	andi	r24, 0x0F	; 15
 5fc:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5fe:	82 b3       	in	r24, 0x12	; 18
 600:	68 2b       	or	r22, r24
 602:	62 bb       	out	0x12, r22	; 18
 604:	08 95       	ret

00000606 <led_init>:
 */ 

#include "DIO.h"
void led_init(char port ,char pin)
{
	set_pin_dir(port,pin,1);
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	0e 94 57 00 	call	0xae	; 0xae <set_pin_dir>
}
 60c:	08 95       	ret

0000060e <led_on>:
void led_on(char port,char pin)
{
	DIO_write(port,pin,1);
 60e:	41 e0       	ldi	r20, 0x01	; 1
 610:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
}
 614:	08 95       	ret

00000616 <led_off>:
void led_off(char port,char pin )
{
	DIO_write(port,pin,0);
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
}
 61c:	08 95       	ret

0000061e <led_toggle>:
void led_toggle(char port ,char pin)
{
	DIO_toggle(port,pin);
 61e:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_toggle>
}
 622:	08 95       	ret

00000624 <LED_status>:
char LED_status(char port, char pin )
{
	return DIO_read(port ,pin);
 624:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_read>
}
 628:	08 95       	ret

0000062a <seven_seg_init>:

#include "DIO.h"

void seven_seg_init(char port_name)
{
	set_port_dir(port_name, 0xff);	
 62a:	6f ef       	ldi	r22, 0xFF	; 255
 62c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <set_port_dir>
}
 630:	08 95       	ret

00000632 <seven_seg_write>:

void seven_seg_write(char port_name, char val)
{
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	2a 97       	sbiw	r28, 0x0a	; 10
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d, 0x7d, 0x07, 0x7f, 0x6f};
 646:	de 01       	movw	r26, r28
 648:	11 96       	adiw	r26, 0x01	; 1
 64a:	e0 e6       	ldi	r30, 0x60	; 96
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	9a e0       	ldi	r25, 0x0A	; 10
 650:	01 90       	ld	r0, Z+
 652:	0d 92       	st	X+, r0
 654:	91 50       	subi	r25, 0x01	; 1
 656:	e1 f7       	brne	.-8      	; 0x650 <seven_seg_write+0x1e>
	DIO_write_port(port_name,arr[val]);	
 658:	fe 01       	movw	r30, r28
 65a:	e6 0f       	add	r30, r22
 65c:	f1 1d       	adc	r31, r1
 65e:	61 81       	ldd	r22, Z+1	; 0x01
 660:	0e 94 09 02 	call	0x412	; 0x412 <DIO_write_port>
 664:	2a 96       	adiw	r28, 0x0a	; 10
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	de bf       	out	0x3e, r29	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	cd bf       	out	0x3d, r28	; 61
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <main>:
#include "seven.h"
#include "buzzer.h"
#include "LED.h"
int main(void)
{
	seven_seg_init('A');
 676:	81 e4       	ldi	r24, 0x41	; 65
 678:	0e 94 15 03 	call	0x62a	; 0x62a <seven_seg_init>
	buzzer_init('D',1);
 67c:	84 e4       	ldi	r24, 0x44	; 68
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	0e 94 49 00 	call	0x92	; 0x92 <buzzer_init>
	led_init('D',2);
 684:	84 e4       	ldi	r24, 0x44	; 68
 686:	62 e0       	ldi	r22, 0x02	; 2
 688:	0e 94 03 03 	call	0x606	; 0x606 <led_init>
	unsigned char counter; 
    while(1)
    {
		for(counter=9;counter>=0;counter--)
 68c:	c9 e0       	ldi	r28, 0x09	; 9
		{
			if(counter==0)
 68e:	cc 23       	and	r28, r28
 690:	69 f4       	brne	.+26     	; 0x6ac <main+0x36>
			{
				make_sound('D',1);
 692:	84 e4       	ldi	r24, 0x44	; 68
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 50 00 	call	0xa0	; 0xa0 <make_sound>
				led_on('D',2);
 69a:	84 e4       	ldi	r24, 0x44	; 68
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	0e 94 07 03 	call	0x60e	; 0x60e <led_on>
				seven_seg_write('A',0);
 6a2:	81 e4       	ldi	r24, 0x41	; 65
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	0e 94 19 03 	call	0x632	; 0x632 <seven_seg_write>
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <main+0x46>
			}
			else if(counter>0&&counter<=9){
 6ac:	8c 2f       	mov	r24, r28
 6ae:	81 50       	subi	r24, 0x01	; 1
 6b0:	89 30       	cpi	r24, 0x09	; 9
 6b2:	20 f4       	brcc	.+8      	; 0x6bc <main+0x46>
				seven_seg_write('A',counter);
 6b4:	81 e4       	ldi	r24, 0x41	; 65
 6b6:	6c 2f       	mov	r22, r28
 6b8:	0e 94 19 03 	call	0x632	; 0x632 <seven_seg_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	93 ed       	ldi	r25, 0xD3	; 211
 6c0:	a0 e3       	ldi	r26, 0x30	; 48
 6c2:	81 50       	subi	r24, 0x01	; 1
 6c4:	90 40       	sbci	r25, 0x00	; 0
 6c6:	a0 40       	sbci	r26, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0x4c>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x56>
 6cc:	00 00       	nop
	buzzer_init('D',1);
	led_init('D',2);
	unsigned char counter; 
    while(1)
    {
		for(counter=9;counter>=0;counter--)
 6ce:	c1 50       	subi	r28, 0x01	; 1
			}
			else if(counter>0&&counter<=9){
				seven_seg_write('A',counter);
			}
			_delay_ms(2000);
		}
 6d0:	de cf       	rjmp	.-68     	; 0x68e <main+0x18>

000006d2 <_exit>:
 6d2:	f8 94       	cli

000006d4 <__stop_program>:
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <__stop_program>
